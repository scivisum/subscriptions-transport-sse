{"version":3,"sources":["../src/client.js"],"names":["SubscriptionClient","url","_url","_subscriptions","_numSubscriptions","options","handler","subID","queryString","Object","keys","map","key","encodeURIComponent","toQueryParam","join","EventSource","NativeEventSource","EventSourcePolyfill","evtSource","heartbeatTimeout","onmessage","event","parsed","JSON","parse","data","onerror","console","warn","close","SSELink","subscriptionClient","_subscriptionClient","operation","forward","query","definitions","Observable","observer","subscribe","assign","_","next","unsubscribe","ApolloLink","obj","stringify"],"mappings":"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","sourcesContent":["import {ApolloLink, Observable} from \"apollo-link\";\nimport {print} from \"graphql/language/printer\";\nimport {NativeEventSource, EventSourcePolyfill} from \"event-source-polyfill\";\n\n\nexport class SubscriptionClient {\n  constructor(url) {\n    this._url = url;\n    this._subscriptions = {};\n    this._numSubscriptions = 0;\n  }\n\n  subscribe(options, handler) {\n    let subID = this._numSubscriptions++;\n\n    let queryString = Object.keys(options)\n      .map(key => `${encodeURIComponent(key)}=${toQueryParam(options[key])}`)\n      .join(\"&\");\n\n    const EventSource = NativeEventSource || EventSourcePolyfill;\n    const evtSource = new EventSource(`${this._url}?${queryString}`, { heartbeatTimeout: 660000 });\n    // const evtSource = this._eventSourceFactory(`${this._url}?${queryString}`);\n    this._subscriptions[subID] = {options, handler, evtSource};\n\n    evtSource.onmessage = event => {\n      const parsed = JSON.parse(event.data);\n      this._subscriptions[subID].handler(null, parsed);\n    };\n    evtSource.onerror = event => {\n      console.warn(\n        `EventSource connection dropped for subscription ID ${subID}`,\n        event\n      );\n      // Don't do anything other than log it, otherwise Apollo will unsubscribe when we want the\n      // EventSource to auto-reconnect.\n    };\n    return subID;\n  }\n\n  unsubscribe(subID) {\n    if (this._subscriptions[subID] && this._subscriptions[subID].evtSource) {\n      this._subscriptions[subID].evtSource.close();\n    }\n    delete this._subscriptions[subID];\n  }\n}\n\nexport class SSELink extends ApolloLink {\n  constructor(subscriptionClient) {\n    super();\n    this._subscriptionClient = subscriptionClient;\n  }\n\n  request(operation, forward) {\n    // Note: the following means that we do not support batch operations if one of them is a\n    // subscription.\n    if (operation.query.definitions[0].operation !== \"subscription\") {\n      return forward(operation);\n    }\n    return new Observable(observer => {\n      const subID = this._subscriptionClient.subscribe(\n        Object.assign(operation, {query: print(operation.query)}),\n        // Odd callback signature necessary for compatibility with graphiql-subscriptions-fetcher.\n        (_, data) => {\n          observer.next(data);\n        }\n      );\n\n      return () => this._subscriptionClient.unsubscribe(subID);\n    });\n  }\n}\n\nconst toQueryParam = obj => {\n  if (typeof obj === \"object\") {\n    obj = JSON.stringify(obj);\n  }\n  return encodeURIComponent(obj);\n};\n"],"file":"client.js"}