{"version":3,"sources":["../src/client.js"],"names":["EventSource","SubscriptionClient","url","_url","_subscriptions","_numSubscriptions","options","handler","subID","queryString","map","encodeURIComponent","key","toQueryParam","join","evtSource","onmessage","parsed","JSON","parse","event","data","onerror","console","warn","subId","close","SSELink","paramsOrClient","_subscriptionClient","operation","forward","query","definitions","subscribe","_","observer","next","unsubscribe","obj"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,cAAc,kFAApB;;IAEaC,kB,WAAAA,kB;AACX,8BAAYC,GAAZ,EAAiB;AAAA;;AACf,SAAKC,IAAL,GAAYD,GAAZ;AACA,SAAKE,cAAL,GAAsB,EAAtB;AACA,SAAKC,iBAAL,GAAyB,CAAzB;AACD;;;;8BAESC,O,EAASC,O,EAAS;AAAA;;AAC1B,UAAIC,QAAQ,KAAKH,iBAAL,EAAZ;;AAEA,UAAII,cAAc,oBAAYH,OAAZ,EACfI,GADe,CACX;AAAA,eAAUC,mBAAmBC,GAAnB,CAAV,SAAqCC,aAAaP,QAAQM,GAAR,CAAb,CAArC;AAAA,OADW,EAEfE,IAFe,CAEV,GAFU,CAAlB;;AAIA,UAAMC,YAAY,IAAIf,WAAJ,CAAmB,KAAKG,IAAxB,SAAgCM,WAAhC,CAAlB;AACA,WAAKL,cAAL,CAAoBI,KAApB,IAA6B,EAACF,gBAAD,EAAUC,gBAAV,EAAmBQ,oBAAnB,EAA7B;;AAEAA,gBAAUC,SAAV,GAAsB,iBAAS;AAC7B,YAAMC,SAASC,KAAKC,KAAL,CAAWC,MAAMC,IAAjB,CAAf;AACA,cAAKjB,cAAL,CAAoBI,KAApB,EAA2BD,OAA3B,CAAmC,IAAnC,EAAyCU,MAAzC;AACD,OAHD;AAIAF,gBAAUO,OAAV,GAAoB,iBAAS;AAC3BC,gBAAQC,IAAR,yDACwDhB,KADxD,EACiEY,KADjE;AAGA;AACA;AACD,OAND;AAOA,aAAOZ,KAAP;AACD;;;gCAEWiB,K,EAAO;AACjB,UAAI,KAAKrB,cAAL,CAAoBqB,KAApB,KAA8B,KAAKrB,cAAL,CAAoBqB,KAApB,EAA2BV,SAA7D,EAAwE;AACtE,aAAKX,cAAL,CAAoBqB,KAApB,EAA2BV,SAA3B,CAAqCW,KAArC;AACD;AACD,aAAO,KAAKtB,cAAL,CAAoBqB,KAApB,CAAP;AACD;;;;;IAGUE,O,WAAAA,O;;;AACX,mBAAYC,cAAZ,EAA4B;AAAA;;AAAA;;AAE1B,WAAKC,mBAAL,GAA2BD,cAA3B;AAF0B;AAG3B;;;;4BAEOE,S,EAAWC,O,EAAS;AAAA;;AAC1B;AACA;AACA,UAAID,UAAUE,KAAV,CAAgBC,WAAhB,CAA4B,CAA5B,EAA+BH,SAA/B,KAA6C,cAAjD,EAAiE;AAC/D,eAAOC,QAAQD,SAAR,CAAP;AACD;AACD,aAAO,2BAAe,oBAAY;AAChC,YAAMtB,QAAQ,OAAKqB,mBAAL,CAAyBK,SAAzB,CACZ,sBAAcJ,SAAd,EAAyB,EAACE,OAAO,oBAAMF,UAAUE,KAAhB,CAAR,EAAzB,CADY;AAEZ;AACA,kBAACG,CAAD,EAAId,IAAJ,EAAa;AACXe,mBAASC,IAAT,CAAchB,IAAd;AACD,SALW,CAAd;;AAQA,eAAO;AAAA,iBAAM,OAAKQ,mBAAL,CAAyBS,WAAzB,CAAqC9B,KAArC,CAAN;AAAA,SAAP;AACD,OAVM,CAAP;AAWD;;;;;AAGH,IAAMK,eAAe,SAAfA,YAAe,MAAO;AAC1B,MAAI,QAAO0B,GAAP,uDAAOA,GAAP,OAAe,QAAnB,EAA6B;AAC3B,WAAO,yBAAeA,GAAf,CAAP;AACD;AACD,SAAO5B,mBAAmB4B,GAAnB,CAAP;AACD,CALD","file":"client.js","sourcesContent":["import {ApolloLink, Observable} from 'apollo-link';\nimport {print} from 'graphql/language/printer';\nimport {NativeEventSource, EventSourcePolyfill} from 'event-source-polyfill';\n\nconst EventSource = NativeEventSource || EventSourcePolyfill;\n\nexport class SubscriptionClient {\n  constructor(url) {\n    this._url = url;\n    this._subscriptions = {};\n    this._numSubscriptions = 0;\n  }\n\n  subscribe(options, handler) {\n    let subID = this._numSubscriptions++;\n\n    let queryString = Object.keys(options)\n      .map(key => `${encodeURIComponent(key)}=${toQueryParam(options[key])}`)\n      .join('&');\n\n    const evtSource = new EventSource(`${this._url}?${queryString}`);\n    this._subscriptions[subID] = {options, handler, evtSource};\n\n    evtSource.onmessage = event => {\n      const parsed = JSON.parse(event.data);\n      this._subscriptions[subID].handler(null, parsed);\n    };\n    evtSource.onerror = event => {\n      console.warn(\n        `EventSource connection dropped for subscription ID ${subID}`, event\n      );\n      // Don't do anything other than log it, otherwise Apollo will unsubscribe when we want the\n      // EventSource to auto-reconnect.\n    };\n    return subID;\n  }\n\n  unsubscribe(subId) {\n    if (this._subscriptions[subId] && this._subscriptions[subId].evtSource) {\n      this._subscriptions[subId].evtSource.close();\n    }\n    delete this._subscriptions[subId];\n  }\n}\n\nexport class SSELink extends ApolloLink {\n  constructor(paramsOrClient) {\n    super();\n    this._subscriptionClient = paramsOrClient;\n  }\n\n  request(operation, forward) {\n    // Note: the following means that we do not support batch operations if one of them is a\n    // subscription.\n    if (operation.query.definitions[0].operation !== 'subscription') {\n      return forward(operation);\n    }\n    return new Observable(observer => {\n      const subID = this._subscriptionClient.subscribe(\n        Object.assign(operation, {query: print(operation.query)}),\n        // Odd callback signature necessary for compatibility with graphiql-_subscriptions-fetcher.\n        (_, data) => {\n          observer.next(data);\n        }\n      );\n\n      return () => this._subscriptionClient.unsubscribe(subID);\n    });\n  }\n}\n\nconst toQueryParam = obj => {\n  if (typeof obj === 'object') {\n    return JSON.stringify(obj);\n  }\n  return encodeURIComponent(obj);\n};\n"]}